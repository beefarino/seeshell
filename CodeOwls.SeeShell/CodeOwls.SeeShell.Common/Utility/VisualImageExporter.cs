using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using FontFamily = System.Windows.Media.FontFamily;
using FontStyle = System.Drawing.FontStyle;
using Point = System.Windows.Point;

namespace CodeOwls.SeeShell.Common.Utility
{
    public class VisualImageExporter
    {
        public const string MainVisualizationElementName = "MainVisualization";
        
        FrameworkElement LocateMainVisualization(FrameworkElement element)
        {            
            if (null == element)
            {
                return null;
            }
            while (null != element.Parent as FrameworkElement)
            {
                element = element.Parent as FrameworkElement;
            }
            
            element.ApplyTemplate();

            return element.FindName( MainVisualizationElementName ) as FrameworkElement;
        }

        public void Export(FrameworkElement view, Stream outputStream )
        {
            if (null == view || null == outputStream)
            {
                return;
            }

            view = LocateMainVisualization(view);
            
            if (null == view )
            {
                return;
            }

            var bounds = VisualTreeHelper.GetDescendantBounds(view);
            RenderTargetBitmap bitmap = new RenderTargetBitmap((int)(bounds.Width), (int)(bounds.Height), 96, 96, PixelFormats.Pbgra32);
            DrawingVisual visual = new DrawingVisual();
            using (DrawingContext context = visual.RenderOpen())
            {
                VisualBrush brush = new VisualBrush(view);
                context.DrawRectangle(brush, null, new Rect( new Point(), bounds.Size ));
                //OverlaySeeShellInfo(context, bitmap);
            }
            bitmap.Render(visual);
            
            var encoder = new PngBitmapEncoder();
            encoder.Frames.Add( BitmapFrame.Create( bitmap ));
            encoder.Save( outputStream );
        }

//        [Unpaid]
        void OverlaySeeShellInfo(DrawingContext drawingContext, RenderTargetBitmap bitmap)
        {
            var message = @"Generated by SeeShell

Copyright (c) 2013 Code Owls LLC, All Rights Reserved.
http://www.codeowls.com/seeshell

Note: the licensed version does not display this message.";

            FormattedText text = new FormattedText(message,
                new CultureInfo("en-us"),
                FlowDirection.LeftToRight,
                new Typeface(
                    new FontFamily("Verdana"), 
                    FontStyles.Normal, 
                    FontWeights.Normal, 
                    new FontStretch()),
                10.0,
                new SolidColorBrush(Colors.Black));
            text.TextAlignment = TextAlignment.Center;
            
            var size = new System.Windows.Size(text.Width + 10, text.Height + 10);
            var origin = new Point((bitmap.Width - size.Width)/2, (bitmap.Height - size.Height)/2);
            drawingContext.DrawRoundedRectangle(
                new SolidColorBrush( System.Windows.Media.Color.FromArgb( 220, 255,255,255) ),
                new System.Windows.Media.Pen( new SolidColorBrush( Colors.Black), 2.0d ),
                new Rect( origin, size ),
                5.0d,
                5.0d
                );
            origin.X = bitmap.Width/2;
            origin.Y += 5;
            drawingContext.DrawText(text, origin );
        }
    }
}
