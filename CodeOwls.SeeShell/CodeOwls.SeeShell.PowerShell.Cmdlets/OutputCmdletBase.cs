using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text.RegularExpressions;
using System.Windows.Threading;
using CodeOwls.SeeShell.Common;
using CodeOwls.SeeShell.Common.Attributes;
using CodeOwls.SeeShell.Common.Providers;
using CodeOwls.SeeShell.Common.Utility;
using CodeOwls.SeeShell.Common.ViewModels;
using CodeOwls.SeeShell.Visualizations.Dashboard;


namespace CodeOwls.SeeShell.PowerShell.Cmdlets
{
    public abstract class OutputCmdletBase : PSCmdlet
    {
        private static readonly Log Log = new Log( typeof( OutputCmdletBase ));
        protected OutputCmdletBase()
        {
            _viewModelsCreated = false;
        }

        protected void Dispatch( Action action)
        {
            if( Manager.Dispatcher.CheckAccess() )
            {
                action();
                return;
            }

            Manager.Dispatcher.Invoke( action, DispatcherPriority.Normal);    
        }

        protected void DispatchAsync(Action action)
        {
            Manager.Dispatcher.BeginInvoke(action, DispatcherPriority.Normal);
        }

        protected IDriveOf<T> GetDriveOf<T>(string name)
        {
            return this.SessionState.Drive.Get(name) as IDriveOf<T>;
        }

        protected object GetViewForItem<T>(string driveName, T item)
        {
            var drive = GetDriveOf<T>(driveName) as IViewMap;
            if (null == drive)
            {
                return null;
            }
            return drive.GetViewForItem(item);
        }
        protected T GetExistingViewModel<T>( string driveName, string viewModelName )
            where T : ViewModelBase
        {
            var drive = GetDriveOf<T>(driveName);
            if( null == drive )
            {
                return null;
            }

            return drive.Items.FirstOrDefault(i => StringComparer.InvariantCultureIgnoreCase.Equals(i.Name, Name));
        }

        protected void AddViewModelToDrive<T>(T newViewModel, string driveName, bool show) where T : class
        {
            //Dispatch(() =>
            //{
                if (newViewModel != null)
                {
                    var drive = GetDriveOf<T>(driveName);
                    if (null != drive)
                    {
                        drive.Add(newViewModel, show);
                    }
                }
            //});
        }

        protected void AddViewModelToDrive<T>(T newViewModel, string driveName) where T : class
        {
            AddViewModelToDrive( newViewModel, driveName, true );
        }

        private IPowerShellDataSource CreateCurrentDataSource()
        {
            var currentDataSource = DataSource;
            if (null == currentDataSource )
            {
                var dataSourceName = "_" + Guid.NewGuid().ToString("N");

                if (null != Script)
                {
                    currentDataSource = CreateNewDataSource(dataSourceName, "AutoGeneratedScriptDataSource", Script);                    
                }
                else if( null != InputObject )
                {
                    currentDataSource = CreateNewDataSource(dataSourceName, "AutoGeneratedObjectDataSource", ScriptBlock.Create(""));
                    if (! SampleSize.HasValue)
                    {
                        SampleSize = -1;
                    }
                }

                if( null == currentDataSource )
                {
                    return null;
                }

                if (SampleSize.HasValue)
                {
                    currentDataSource.DataCollectionMaxSize = SampleSize.Value;
                }

                DataSource = currentDataSource;
            }

            return currentDataSource;
        }

        private IPowerShellDataSource CreateNewDataSource(string dataSourceName, string itemTypeName, ScriptBlock script)
        {
            IPowerShellDataSource currentDataSource = null;
            var coll = SessionState.InvokeProvider.Item.New(
                "datasources:/",
                dataSourceName,
                itemTypeName,
                script);

            var pso = coll.FirstOrDefault();
            if (null != pso)
            {
                currentDataSource = pso.BaseObject as IPowerShellDataSource;
            }
            return currentDataSource;
        }

        private IDictionary<Regex, IScaleDescriptor> AdaptHashtableToDescriptorTable(Hashtable specs)
        {
            if( null == specs )
            {
                return new Dictionary<Regex, IScaleDescriptor>();
            }

            var table = new Dictionary<Regex, IScaleDescriptor>();
            foreach (object key in specs.Keys)
            {
                var value = specs[key];
                Regex re = key as Regex;
                IScaleDescriptor descriptor = value as IScaleDescriptor;

                if (null == re)
                {
                    re = new Regex("^" + Regex.Escape( key.ToString() ) + "$",
                                   RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace |
                                   RegexOptions.Singleline);
                }

                if (null == descriptor)
                {
                    Array array = value as Array;
                    if (null != array)
                    {
                        if (1 != array.Length)
                        {
                            descriptor = new ScaleDescriptor( (object[])value );
                        }
                        else
                        {
                            value = array.GetValue(0);
                        }
                    }
                    
                    if( null == descriptor)
                    {
                        descriptor = new ScaleDescriptor(value.ToString());
                    }
                }

                table.Add( re, descriptor );
            }

            return table;
        }

        protected override void BeginProcessing()
        {
            SeriesTable = this.SeriesTable ?? DynamicallySpecifiedSeriesDefinitions.ToHashtable();
            ScaleDescriptorTable = AdaptHashtableToDescriptorTable(SeriesTable);
            base.BeginProcessing();
        }

        protected override void ProcessRecord()
        {
            using( Log.PushContext("Processing record [{0}]", InputObject) )
            {
                if (null != InputObject)
                {
                    var dataSource = InputObject.SafeAsBaseObject<IPowerShellDataSource>();
                    var scriptBlock = InputObject.SafeAsBaseObject<ScriptBlock>();

                    if (null != dataSource)
                    {
                        DataSource = dataSource;
                        InputObject = null;
                    }
                    else if (null != scriptBlock)
                    {
                        Script = scriptBlock;
                        InputObject = null;
                    }
                }

                var ds = CreateCurrentDataSource();

                if (null != InputObject)
                {
                    ds.AddDataObject(InputObject.ToPSObject());

                    if (_viewModelsCreated)
                    {
                        return;
                    }
                }

                ProcessRecord(ds);
                _viewModelsCreated = true;
            }
        }

        protected IDictionary<Regex, IScaleDescriptor> ScaleDescriptorTable
        {
            get; private set;
        }

        private bool _viewModelsCreated;
        protected abstract void ProcessRecord(IPowerShellDataSource ds);

        [Parameter(Mandatory = true)]
        public string Name { get; set; }

        protected IPowerShellDataSource DataSource { get; set; }

        [Parameter(Mandatory = true, ValueFromPipeline = true)]
        [PathArgumentTransformation]
        public PSObject InputObject { get; set; }

        [Parameter( Mandatory=false)]
        public Hashtable SeriesTable { get; set; }

        [Parameter(Mandatory = false, ValueFromRemainingArguments = true)]
        public object[] DynamicallySpecifiedSeriesDefinitions { get; set; }

        [Parameter(Mandatory = false)]
        public int? SampleSize { get; set; }

        ScriptBlock Script { get; set; }

        protected void OutDebug( string format, params object[] args )
        {
            WriteDebug( String.Format( format, args ));
        }
        protected void OutVerbose(string format, params object[] args)
        {
            WriteVerbose(String.Format(format, args));
        }
        protected void OutWarning(string format, params object[] args)
        {
            WriteWarning(String.Format(format, args));
        }
    }
}